// <auto-generated />
using System;
using Blog.ORM.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Blog.OrmApp.Migrations
{
    [DbContext(typeof(BlogContext))]
    [Migration("20200825201332_entry_category_link_entity_added")]
    partial class entry_category_link_entity_added
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Blog.Domain.AuditableEntities.Content", b =>
                {
                    b.Property<string>("ContentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EntryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Html")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContentId");

                    b.HasIndex("EntryId");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("Blog.Domain.AuditableEntities.Entry", b =>
                {
                    b.Property<string>("EntryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan>("ReadingTime")
                        .HasColumnType("time");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EntryId");

                    b.HasIndex("ContentId");

                    b.HasIndex("ContentId1");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("Blog.Domain.AuditableEntities.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Blog.Domain.LinkEntities.EntryCategory", b =>
                {
                    b.Property<string>("EntryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId1")
                        .HasColumnType("int");

                    b.Property<string>("EntryId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EntryId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CategoryId1");

                    b.HasIndex("EntryId1");

                    b.ToTable("EntryCategories");
                });

            modelBuilder.Entity("Blog.Domain.PropertyEntities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Blog.Domain.PropertyEntities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Blog.Domain.PropertyEntities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Blog.Domain.PropertyEntities.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("Blog.Domain.ValueObjects.Address", b =>
                {
                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Line")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("TypeId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Blog.Domain.ValueObjects.Phone", b =>
                {
                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Number");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("Blog.Domain.ValueObjects.Status", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasIndex("TypeId");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Blog.Domain.AuditableEntities.Content", b =>
                {
                    b.HasOne("Blog.Domain.AuditableEntities.Entry", null)
                        .WithMany()
                        .HasForeignKey("EntryId");
                });

            modelBuilder.Entity("Blog.Domain.AuditableEntities.Entry", b =>
                {
                    b.HasOne("Blog.Domain.AuditableEntities.Content", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId");

                    b.HasOne("Blog.Domain.AuditableEntities.Content", null)
                        .WithMany()
                        .HasForeignKey("ContentId1");

                    b.HasOne("Blog.Domain.AuditableEntities.User", null)
                        .WithMany("Entries")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Blog.Domain.AuditableEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Blog.Domain.AuditableEntities.User", b =>
                {
                    b.OwnsMany("Blog.Domain.ValueObjects.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("Token")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("ExpiresAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("OwnerId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("OwnerIp")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("RevokedAt")
                                .HasColumnType("datetime2");

                            b1.HasKey("Token");

                            b1.HasIndex("OwnerId");

                            b1.ToTable("RefreshTokens");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });
                });

            modelBuilder.Entity("Blog.Domain.LinkEntities.EntryCategory", b =>
                {
                    b.HasOne("Blog.Domain.PropertyEntities.Category", null)
                        .WithMany("EntryCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blog.Domain.PropertyEntities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId1");

                    b.HasOne("Blog.Domain.AuditableEntities.Entry", null)
                        .WithMany("EntryCategories")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blog.Domain.AuditableEntities.Entry", "Entry")
                        .WithMany()
                        .HasForeignKey("EntryId1");
                });

            modelBuilder.Entity("Blog.Domain.PropertyEntities.City", b =>
                {
                    b.HasOne("Blog.Domain.PropertyEntities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("Blog.Domain.ValueObjects.Address", b =>
                {
                    b.HasOne("Blog.Domain.PropertyEntities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Blog.Domain.PropertyEntities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Blog.Domain.PropertyEntities.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("Blog.Domain.ValueObjects.Phone", b =>
                {
                    b.HasOne("Blog.Domain.PropertyEntities.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.HasOne("Blog.Domain.AuditableEntities.User", null)
                        .WithMany("Phones")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Blog.Domain.AuditableEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Blog.Domain.ValueObjects.Status", b =>
                {
                    b.HasOne("Blog.Domain.PropertyEntities.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });
#pragma warning restore 612, 618
        }
    }
}
